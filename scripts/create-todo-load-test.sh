#!/bin/bash

# Todo„Ç¢„Éó„É™Ë≤†Ëç∑„ÉÜ„Çπ„Éà‰ΩúÊàê„Çπ„ÇØ„É™„Éó„Éà
# ‰ΩøÁî®ÊñπÊ≥ï: ./scripts/create-todo-load-test.sh

set -e

echo "üß™ Todo„Ç¢„Éó„É™Ë≤†Ëç∑„ÉÜ„Çπ„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åô..."

# Ëâ≤‰ªò„Åç„É≠„Ç∞Èñ¢Êï∞
log_info() {
    echo -e "\033[32m[INFO]\033[0m $1"
}

log_success() {
    echo -e "\033[32m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[31m[ERROR]\033[0m $1"
}

# „ÉÜ„Çπ„ÉàÁî®„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
TEST_DIR="todo-load-tests"
mkdir -p "$TEST_DIR"

# 1. Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„ÉàÔºà10„É¶„Éº„Ç∂„ÉºÔºâ
log_info "Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„ÉàÔºà10„É¶„Éº„Ç∂„ÉºÔºâ„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
cat > "$TEST_DIR/basic-load-test.jmx" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Todo Basic Load Test" enabled="true">
      <stringProp name="TestPlan.comments">10„É¶„Éº„Ç∂„Éº„Åß„ÅÆÂü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„Éà</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">http://localhost:3000</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControllerGui" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <!-- „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Account" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/accounts</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// „É©„É≥„ÉÄ„É†„Å™„Ç¢„Ç´„Ç¶„É≥„ÉàÂêç„ÇíÁîüÊàê
String accountName = "TestUser" + System.currentTimeMillis() + Thread.currentThread().getId();
String icon = "user" + (int)(Math.random() * 10);

// „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£„ÇíË®≠ÂÆö
String requestBody = "{\"accountName\":\"" + accountName + "\",\"icon\":\"" + icon + "\"}";
vars.put("REQUEST_BODY", requestBody);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
EOF

log_success "Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: $TEST_DIR/basic-load-test.jmx"

# 2. „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„ÉàÔºà100„É¶„Éº„Ç∂„ÉºÔºâ
log_info "„Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„ÉàÔºà100„É¶„Éº„Ç∂„ÉºÔºâ„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
cat > "$TEST_DIR/stress-test.jmx" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Todo Stress Test" enabled="true">
      <stringProp name="TestPlan.comments">100„É¶„Éº„Ç∂„Éº„Åß„ÅÆ„Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">http://localhost:3000</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControllerGui" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <!-- „Çø„Çπ„ÇØ‰ΩúÊàê -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Task" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/tasks</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// „É©„É≥„ÉÄ„É†„Å™„Çø„Çπ„ÇØ„Éá„Éº„Çø„ÇíÁîüÊàê
String title = "Test Task " + System.currentTimeMillis();
String description = "Description for task " + Thread.currentThread().getId();
String accountId = "test-account-" + (int)(Math.random() * 100);

// „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£„ÇíË®≠ÂÆö
String requestBody = "{\"title\":\"" + title + "\",\"description\":\"" + description + "\",\"accountId\":\"" + accountId + "\"}";
vars.put("REQUEST_BODY", requestBody);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
EOF

log_success "„Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: $TEST_DIR/stress-test.jmx"

# 3. ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàê
log_info "ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
cat > "$TEST_DIR/run-load-tests.sh" << 'EOF'
#!/bin/bash

# Todo„Ç¢„Éó„É™Ë≤†Ëç∑„ÉÜ„Çπ„ÉàÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà
# ‰ΩøÁî®ÊñπÊ≥ï: ./run-load-tests.sh [test-type]

set -e

TEST_TYPE=${1:-"basic"}
BASE_URL=${2:-"http://localhost:3000"}

echo "üß™ Todo„Ç¢„Éó„É™Ë≤†Ëç∑„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Åæ„Åô..."
echo "„ÉÜ„Çπ„Éà„Çø„Ç§„Éó: $TEST_TYPE"
echo "„Éô„Éº„ÇπURL: $BASE_URL"

# JMeter„Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫Ë™ç
JMETER_DIR="../../apache-jmeter-5.6.3"
if [ ! -d "$JMETER_DIR" ]; then
    echo "‚ùå JMeter„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $JMETER_DIR"
    echo "Ëß£Ê±∫ÊñπÊ≥ï: ../../scripts/setup-jmeter.sh „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    exit 1
fi

# ÁµêÊûú„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
RESULTS_DIR="results"
mkdir -p "$RESULTS_DIR"

# „ÉÜ„Çπ„ÉàÂÆüË°å
case $TEST_TYPE in
    "basic")
        echo "üìä Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„ÉàÔºà10„É¶„Éº„Ç∂„ÉºÔºâ„ÇíÂÆüË°å‰∏≠..."
        cd "$JMETER_DIR"
        ./bin/jmeter.sh -n -t "../todo-load-tests/basic-load-test.jmx" \
            -l "../todo-load-tests/$RESULTS_DIR/basic-results.jtl" \
            -e -o "../todo-load-tests/$RESULTS_DIR/basic-report" \
            -J BASE_URL="$BASE_URL"
        ;;
    "stress")
        echo "üìä „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„ÉàÔºà100„É¶„Éº„Ç∂„ÉºÔºâ„ÇíÂÆüË°å‰∏≠..."
        cd "$JMETER_DIR"
        ./bin/jmeter.sh -n -t "../todo-load-tests/stress-test.jmx" \
            -l "../todo-load-tests/$RESULTS_DIR/stress-results.jtl" \
            -e -o "../todo-load-tests/$RESULTS_DIR/stress-report" \
            -J BASE_URL="$BASE_URL"
        ;;
    *)
        echo "‚ùå ÁÑ°Âäπ„Å™„ÉÜ„Çπ„Éà„Çø„Ç§„Éó: $TEST_TYPE"
        echo "‰ΩøÁî®ÂèØËÉΩ„Å™„Çø„Ç§„Éó: basic, stress"
        exit 1
        ;;
esac

if [ $? -eq 0 ]; then
    echo "‚úÖ Ë≤†Ëç∑„ÉÜ„Çπ„Éà„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
    echo ""
    echo "üìä ÁµêÊûú„Éï„Ç°„Ç§„É´:"
    echo "  - „ÉÜ„Çπ„ÉàÁµêÊûú: $RESULTS_DIR/${TEST_TYPE}-results.jtl"
    echo "  - HTML „É¨„Éù„Éº„Éà: $RESULTS_DIR/${TEST_TYPE}-report/index.html"
    echo ""
    echo "üìö Ë©≥Á¥∞„Å™‰ΩøÁî®ÊñπÊ≥ï„ÅØ ../../docs/load-testing/LOAD_TESTING_PATTERNS.md „ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
else
    echo "‚ùå Ë≤†Ëç∑„ÉÜ„Çπ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
    exit 1
fi
EOF

chmod +x "$TEST_DIR/run-load-tests.sh"
log_success "ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: $TEST_DIR/run-load-tests.sh"

# 4. README‰ΩúÊàê
log_info "README„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
cat > "$TEST_DIR/README.md" << 'EOF'
# Todo„Ç¢„Éó„É™Ë≤†Ëç∑„ÉÜ„Çπ„Éà

## Ê¶ÇË¶Å

Next.js/TypeScript + Prisma + PostgreSQL „Çí‰ΩøÁî®„Åó„ÅüTodo„Ç¢„Éó„É™„ÅÆË≤†Ëç∑„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇ

## „ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´

- `basic-load-test.jmx` - Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„ÉàÔºà10„É¶„Éº„Ç∂„ÉºÔºâ
- `stress-test.jmx` - „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„ÉàÔºà100„É¶„Éº„Ç∂„ÉºÔºâ
- `run-load-tests.sh` - „ÉÜ„Çπ„ÉàÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà

## ‰ΩøÁî®ÊñπÊ≥ï

### 1. ÂâçÊèêÊù°‰ª∂

```bash
# JMeter„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
cd ../../
./scripts/setup-jmeter.sh

# Todo„Ç¢„Éó„É™„ÅÆËµ∑Âãï
pnpm dev
```

### 2. Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„ÉàÂÆüË°å

```bash
# 10„É¶„Éº„Ç∂„Éº„Åß„ÅÆÂü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„Éà
./run-load-tests.sh basic

# „Ç´„Çπ„Çø„É†URL„Åß„ÅÆ„ÉÜ„Çπ„Éà
./run-load-tests.sh basic http://localhost:3001
```

### 3. „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„ÉàÂÆüË°å

```bash
# 100„É¶„Éº„Ç∂„Éº„Åß„ÅÆ„Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà
./run-load-tests.sh stress

# „Ç´„Çπ„Çø„É†URL„Åß„ÅÆ„ÉÜ„Çπ„Éà
./run-load-tests.sh stress http://localhost:3001
```

## „ÉÜ„Çπ„ÉàÂÜÖÂÆπ

### Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„Éà
- **„É¶„Éº„Ç∂„ÉºÊï∞**: 10
- **Á∂ôÁ∂öÊôÇÈñì**: 5ÂàÜ
- **Êìç‰Ωú**: „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê„ÄÅ„Çø„Çπ„ÇØ‰ΩúÊàê
- **ÁõÆÁöÑ**: ÈÄöÂ∏∏„ÅÆË≤†Ëç∑„Åß„ÅÆÊÄßËÉΩÊ∏¨ÂÆö

### „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà
- **„É¶„Éº„Ç∂„ÉºÊï∞**: 100
- **Á∂ôÁ∂öÊôÇÈñì**: 10ÂàÜ
- **Êìç‰Ωú**: „Çø„Çπ„ÇØ‰ΩúÊàê„ÄÅÂèñÂæó„ÄÅÊõ¥Êñ∞
- **ÁõÆÁöÑ**: „Ç∑„Çπ„ÉÜ„É†ÈôêÁïå„ÅÆÁâπÂÆö

## ÁµêÊûú„ÅÆÁ¢∫Ë™ç

### HTML„É¨„Éù„Éº„Éà
```bash
# „Éñ„É©„Ç¶„Ç∂„Åß„É¨„Éù„Éº„Éà„ÇíÈñã„Åè
open results/basic-report/index.html
open results/stress-report/index.html
```

### ‰∏ªË¶ÅÊåáÊ®ô
- **ÂøúÁ≠îÊôÇÈñì**: Âπ≥Âùá„ÄÅ95„Éë„Éº„Çª„É≥„Çø„Ç§„É´
- **„Çπ„É´„Éº„Éó„ÉÉ„Éà**: „É™„ÇØ„Ç®„Çπ„Éà/Áßí
- **„Ç®„É©„ÉºÁéá**: 4xx, 5xx„Ç®„É©„Éº„ÅÆÂâ≤Âêà
- **„Çπ„É¨„ÉÉ„ÉâÊï∞**: „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„ÉºÊï∞

## „Ç´„Çπ„Çø„Éû„Ç§„Ç∫

### „ÉÜ„Çπ„Éà„Éë„É©„É°„Éº„Çø„ÅÆÂ§âÊõ¥
JMeter„ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´Ôºà.jmxÔºâ„ÇíÁ∑®ÈõÜ„Åó„Å¶‰ª•‰∏ã„ÇíË™øÊï¥ÂèØËÉΩÔºö

- „Çπ„É¨„ÉÉ„ÉâÊï∞Ôºà„É¶„Éº„Ç∂„ÉºÊï∞Ôºâ
- Á∂ôÁ∂öÊôÇÈñì
- „É©„É≥„Éó„Ç¢„ÉÉ„ÉóÊôÇÈñì
- „É™„ÇØ„Ç®„Çπ„ÉàÈñìÈöî
- „ÉÜ„Çπ„Éà„Éá„Éº„Çø

### Êñ∞„Åó„ÅÑ„ÉÜ„Çπ„Éà„ÅÆËøΩÂä†
1. JMeter„Åß„ÉÜ„Çπ„ÉàË®àÁîª„Çí‰ΩúÊàê
2. .jmx„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶‰øùÂ≠ò
3. ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„Å´Êñ∞„Åó„ÅÑ„Ç±„Éº„Çπ„ÇíËøΩÂä†

## „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞

### „Çà„Åè„ÅÇ„ÇãÂïèÈ°å

1. **Êé•Á∂ö„Ç®„É©„Éº**
   - Todo„Ç¢„Éó„É™„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
   - „Éù„Éº„ÉàÁï™Âè∑„ÅåÊ≠£„Åó„ÅÑ„ÅãÁ¢∫Ë™ç

2. **„É°„É¢„É™‰∏çË∂≥**
   - JMeter„ÅÆ„Éí„Éº„Éó„Çµ„Ç§„Ç∫„ÇíË™øÊï¥
   - „Çπ„É¨„ÉÉ„ÉâÊï∞„ÇíÊ∏õ„Çâ„Åô

3. **„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº**
   - PostgreSQL„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
   - Êé•Á∂ö„Éó„Éº„É´„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç

## ÂèÇËÄÉË≥áÊñô

- [JMeter „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Ç¨„Ç§„Éâ](../../docs/jmeter/JMETER_SETUP.md)
- [Ë≤†Ëç∑„ÉÜ„Çπ„Éà„Éë„Çø„Éº„É≥](../../docs/load-testing/LOAD_TESTING_PATTERNS.md)
EOF

log_success "README„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: $TEST_DIR/README.md"

echo ""
log_success "üéâ Todo„Ç¢„Éó„É™Ë≤†Ëç∑„ÉÜ„Çπ„Éà„ÅÆ‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
echo ""
echo "üìÅ ‰ΩúÊàê„Åï„Çå„Åü„Éï„Ç°„Ç§„É´:"
echo "  - $TEST_DIR/basic-load-test.jmx     # Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„Éà"
echo "  - $TEST_DIR/stress-test.jmx         # „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà"
echo "  - $TEST_DIR/run-load-tests.sh       # ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà"
echo "  - $TEST_DIR/README.md               # ‰ΩøÁî®ÊñπÊ≥ï"
echo ""
echo "üöÄ ‰ΩøÁî®ÊñπÊ≥ï:"
echo "  cd $TEST_DIR"
echo "  ./run-load-tests.sh basic    # Âü∫Êú¨Ë≤†Ëç∑„ÉÜ„Çπ„Éà"
echo "  ./run-load-tests.sh stress   # „Çπ„Éà„É¨„Çπ„ÉÜ„Çπ„Éà"
echo ""
echo "üìö Ë©≥Á¥∞„Å™‰ΩøÁî®ÊñπÊ≥ï„ÅØ $TEST_DIR/README.md „ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
